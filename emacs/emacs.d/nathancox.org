#+TITLE: Nate's Emacs Config
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Manifesto
- Prefer navive solutions to packages when possible
- Menus and prompts are better than muscle memory
- Consistency is more important than convinence
- =use-package= is /the way/.

* Setup
#+begin_src emacs-lisp
  (setq lexical-binding t)

  (require 'package)

  (setq package-enable-at-startup nil)
  (setq max-lisp-eval-depth 2000)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/") t)

  (when (< emacs-major-version 27)
    (package-initialize))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq gc-cons-threshold 100000000)
  (setq auto-window-vscroll nil)

  (use-package diminish :ensure t)

  (use-package exec-path-from-shell
    :ensure t
    :config
    (setenv "SHELL" "/usr/local/bin/zsh")
    (setq exec-path-from-shell-variables '("PATH"))
    (exec-path-from-shell-initialize))
#+end_src

* Setting sane defaults
#+begin_src emacs-lisp
  (use-package emacs
    :hook ((before-save . delete-trailing-whitespace))
    :bind (("s-SPC" . cycle-spacing))
    :config
    (setq inhibit-startup-screen t
          initial-scratch-message nil
          sentence-end-double-space nil
          ring-bell-function 'ignore
          use-dialog-box nil
          mark-even-if-inactive nil
          kill-whole-line t
          require-final-newline t
          frame-resize-pixelwise t)

    (setq user-full-name "Nathan Cox"
          user-mail-address "ncox@covermymeds.com")

    ;; always allow 'y' instead of 'yes'.
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; default to utf-8 for all the things
    (set-charset-priority 'unicode)
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    ;; write over selected text on input... like all modern editors do
    (delete-selection-mode t)

    ;; Don't persist a custom file, this bites me more than it helps
    (setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
    (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
    (setq enable-local-variables :all)     ; fix =defvar= warnings

    ;; stop emacs from littering the file system with backup files
    (setq make-backup-files nil
          auto-save-default nil
          create-lockfiles nil)

    ;; don't show any extra window chrome
    (when (window-system)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (tooltip-mode -1)
      (toggle-scroll-bar -1))

    ;; use a font I like, but fail gracefully if it isn't available
    (ignore-errors (set-frame-font "JetBrains Mono 14"))

    ;; enable winner mode globally for undo/redo window layout changes
    (winner-mode t)

    ;; clean up the mode line
    (display-time-mode -1)
    (setq column-number-mode t))

  ;; customize tramp default behaviour
  (use-package tramp
    :custom (tramp-default-method "ssh"))

  ;; use the builtin current-line highlighter
  (use-package hl-line-mode
    :hook ((prog-mode) (text-mode)))

  ;; keep package files out of recentf
  (use-package recentf
    :config
    (add-to-list 'recentf-exclude "\\elpa")
    (add-to-list 'recentf-exclude "^/private"))
#+end_src

** Mac config
I use macOS almost exclusively, which comes with a couple of caveats for sane defaults.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)     ; command as Meta
    (setq mac-option-modifier 'super)     ; alt as super
    (setq mac-control-modifier 'control)) ; control as... control

  (setq insert-directory-program "gls" dired-use-ls-dired t)
  (setq dired-listing-switches "-al --group-directories-first")

  (if (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode))
#+END_SRC

** Indentation
Recently, I made a switch from space indentation to tabs. If you're interested in my reasoning feel free to check out
[[https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/][this reddit thread]]. tl;dr: tabs are far superiour to spaces for some people with visual impairments, and that is reason
enough for me.

However, as in most things, the best option is somewhere in the middle of a polarized debate. Tabs are the more
accessible option for indentation, but suck for /alignment/. The solution is to just use both: tabs for indentation,
spaces for alignment. Fortunately, someone has [[https://github.com/jcsalomon/smarttabs][already taken care of this for us]].

Note that I have set the default of =indent-tabs-mode= to use spaces. I am in the process of converting my projects to
tabs, but the industry standard is spaces. I use =dir-locals= to enable tabs for my projects and wherever else I'm able.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    ;; use common convention for indentation by default
    (setq-default indent-tabs-mode t)     ; Always use spaces.
    (setq-default tab-width 2)            ; 4 is too much

    ;; use a reasonable line length
    (setq-default fill-column 120)

    ;; let emacs handle indentation
    (electric-indent-mode +1))

  ;; indent with tabs, align with spaces where enabled
  (use-package smart-tabs-mode
    :ensure t
    :config (smart-tabs-insinuate 'ruby))

  ;; add a visual intent guide
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-character ?|)
    (highlight-indent-guides-responsive 'stack))
#+end_src

** Text manipulation
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish
    :bind (:map undo-tree-map ("C-x r" . nil)) ; resolves map conflict w/ discover.el
    :config (global-undo-tree-mode))

  (use-package expand-region
    :ensure t
    :diminish
    :bind (("s-e" . #'er/expand-region)))

  (use-package change-inner
    :ensure t
    :diminish
    :after expand-region
    :bind (("s-i" . #'change-inner)
           ("s-o" . #'change-outer)))

  (use-package drag-stuff
    :ensure t
    :diminish
    :bind (("<M-down>" . drag-stuff-down)
           ("<M-up>" . drag-stuff-up)
           ("<M-right>" . drag-stuff-right)
           ("<M-left>" . drag-stuff-left))
    :config (drag-stuff-global-mode 1))
#+end_src

** Buffer management
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :ensure t
    :diminish
    :bind ("C-x +" . zoom)
    :config (zoom-mode t))

  (use-package ibuffer
    :ensure nil
    :commands ibuffer-find-file
    :bind ("C-x C-b" . ibuffer)
    :custom
    (ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))))

  (use-package ibuffer-vc
    :ensure t
    :hook (ibuffer . (lambda ()
                       (ibuffer-vc-set-filter-groups-by-vc-root)
                       (unless (eq ibuffer-sorting-mode 'alphabetic)
                         (ibuffer-do-sort-by-alphabetic))))
    :custom
    (ibuffer-formats '((mark modified read-only " "
                             (name 18 18 :left :elide) " "
                             (size 9 -1 :right) " "
                             (mode 16 16 :left :elide) " "
                             (vc-status 16 16 :left) " "
                             (vc-relative-file)))))

  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window))
#+END_SRC

** Look and feel
#+begin_src emacs-lisp
  (defun nc/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (modus-themes-load-operandi))
      ('dark (modus-themes-load-vivendi))))

  (use-package modus-themes
    :ensure t
    :custom
    (modus-themes-links 'neutral-underline)
    (modus-themes-syntax nil)
    (modus-themes-intense-hl-line t)
    :init
    ;; if a patch has been applied enabling mac system appearance detection,
    ;; use the hook provided. Otherwise, just set a theme manually.
    (if (boundp 'ns-system-appearance-change-functions)
        (add-hook 'ns-system-appearance-change-functions #'nc/apply-theme)
      (modus-themes-load-operandi)))
#+end_src

* Improving navigation
#+BEGIN_SRC emacs-lisp
  ;; jump to character on screen
  (use-package avy
    :ensure t
    :bind (("s-t" . 'avy-goto-char)
           ("s-T" . 'avy-goto-line)
           ("C-c C-j" . 'avy-resume))
    :config (avy-setup-default))

  ;; better predictions based on common usage
  (use-package prescient
    :ensure t
    :config (prescient-persist-mode t))

  ;; better interface for selecting items from a list
  (use-package selectrum
    :ensure t
    :config (selectrum-mode t))

  (use-package selectrum-prescient
    :ensure t
    :config (selectrum-prescient-mode t))

  ;; improved UX for searching in a buffer
  (use-package ctrlf
    :ensure t
    :config (ctrlf-mode t))

  ;; add annotations to minibuffers
  (use-package marginalia
    :ensure t
    :bind (:map minibuffer-local-map ("C-M-a" . marginalia-cycle))
    :custom (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode)
    (advice-add #'marginalia-cycle :after
                (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))
#+END_SRC

* Improving discoverability
#+begin_src emacs-lisp
  (use-package hydra :ensure t)

  (use-package major-mode-hydra
    :ensure t
    :after hydra
    :diminish
    :bind ([s-return] . major-mode-hydra))

  (use-package pretty-hydra)

  (use-package discover
    :ensure t
    :diminish
    :config (global-discover-mode 1))

  (use-package which-key
    :ensure t
    :diminish
    :config (which-key-mode))
#+END_SRC

* Org Mode
** Installation instructions for macOS
1. Install macTEX with `brew install cask mactex`
2. Download and install [[https://amaxwell.github.io/tlutility/][TEX Live Utility]]
3. Ensure Lato font is installed

** Sane defaults
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib              ; install contrib packages
    :bind (("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c r" . org-refile))
    :hook ((after-init . (lambda () (org-agenda nil "n"))))
    :custom
    (org-directory "~/org")
    (org-agenda-files (list org-directory))
    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
    (org-startup-indented t)
    (org-agenda-window-setup 'current-window)
    (org-confirm-babel-evaluate nil)
    (org-export-copy-to-kill-ring 'if-interactive)
    (org-export-with-sub-superscripts '{})
    (org-export-with-toc nil)
    (org-latex-logfiles-extensions
     (quote ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav"
             "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc"
             "ps" "spl" "bbl" "xdv")))
    (org-latex-compiler "xelatex")
    (org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
    :config
    (add-to-list 'exec-path "/Library/TeX/texbin")
    (setq-default TeX-engine 'xetex)
    (setq-default TeX-PDF-mode t))
#+END_SRC

*** TODO add major mode hydra for org mode

** Visual improvements
#+begin_src emacs-lisp
  ;; add fancy bullets
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :custom (org-superstar-special-todo-items t))
#+end_src

** Babel additions
#+begin_src emacs-lisp
  (use-package org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((ruby . t)
       (shell . t))))

  ;; enable mermaid diagram blocks
  (use-package ob-mermaid
    :ensure t
    :custom (ob-mermaid-cli-path "~/.asdf/shims/mmdc"))
#+end_src

** Exporters
#+begin_src emacs-lisp
  ;; add jira format export
  (use-package ox-jira
    :ensure t
    :after org
    :config (eval-after-load "org" '(progn (require 'ox-jira))))

  ;; add github flavored markdown export
  (use-package ox-gfm
    :ensure t
    :config (eval-after-load "org" '(require 'ox-gfm nil t)))
#+end_src

** Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :diminish
    :after (pretty-hydra)
    :hook (after-init . org-roam-mode)
    :custom (org-roam-directory "~/org/slips/")
    :bind ("s-r" . 'org-roam-hydra/body)
    :pretty-hydra
    ((:title "Org Roam" :quit-key "q" :exit t)
      ("Slips"
       (("f" org-roam-find-file "Find or create topic")
        ("i" org-roam-insert "Insert slip")
        ("I" org-roam-insert-immediate "Insert slip (immediately)")
        ("g" org-roam-graph "Open SVG graph"))
       "Toggle"
       (("l" org-roam "Backlinks")
        ("s" org-roam-server-mode "Server" :toggle t :exit nil)))))

  (use-package org-roam-server
    :ensure t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8080
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))

  (use-package org-roam-protocol)
#+end_src

** Task management
One of the common tasks for my day is doing code reviews, which have checklists. I started off by keeping an org file
around with these checklists that I would update every time I did a review. Turns out capture templates are quite a bit
simpler to use on the fly.

#+begin_src emacs-lisp
  (use-package org
    :custom (org-capture-templates
             '(("t" "Task" entry (file+headline "" "Tasks") "* TODO %?\n%u\n%a")
               ("n" "Note" entry (file+headline "" "Notes") "* %?\n%U")
               ("l" "TIL" entry (file+headline "" "Today I Learned...") "* TIL %?\n%U")
               ("r" "Code Reviews")
               ("rr" "RMT Review" entry (file "")
                "* RMT Summary
  | Category          | Outcome |
  |-------------------+---------|
  | *Overall Risk*    | %?        |
  | *PHI*             |         |
  | *Performance*     |         |
  | *Testing*         |         |
  | *Deployment Plan* |         |

  ,** Notes

  LGTRMT :+1:")
               ("re" "EM Review" entry (file "")
                "* EMD Review
  - [%? ] Risk labeled?
  - [ ] Jira card linked?
  - [ ] Jira card links back?
  - [ ] Code review complete?
  - [ ] RMT review complete?
  - [ ] Unique reviewers?
  - [ ] Notifiations sent? (optional)
  - [ ] Dependencies linked? (optional)

  ,** Notes

  LGTEMD :+1:"))))
#+end_src

* Programming
** Completion & linting
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :diminish
    :config (global-company-mode))

  (use-package company-prescient
    :ensure t
    :after prescient
    :config (company-prescient-mode))

  (use-package flycheck
    :ensure t
    :diminish
    :config (global-flycheck-mode))

  (use-package flycheck-package
    :ensure t
    :after flycheck)
#+end_src

*** TODO add pretty hydra for flycheck

** Visual improvements
#+begin_src emacs-lisp
  (use-package emacs
    :config (show-paren-mode))

  ;; match paired brackets with colors
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; more consistant syntax highlighting
  (use-package tree-sitter
    :ensure t
    :diminish
    :hook ((ruby-mode . tree-sitter-hl-mode)
           (rustic-mode . tree-sitter-hl-mode))
    :config (global-tree-sitter-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src

** LSP integration
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (lsp-enable-which-key-integration)
    :commands lsp
    :custom (lsp-keymap-prefix "C-c M-k")
    :config (add-to-list 'exec-path "~/src/elixir-lsp/elixir-ls/release"))

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)
#+END_SRC

*** TODO add pretty hydra for lsp mode

** Version control
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :pin melpa
    :bind (("C-c g s" . magit-status))
    :hook ((git-commit-mode . (lambda () (set-fill-column 72))))
    :config
    (setq git-commit-style-convention-checks '(non-empty-second-line overlong-summary-line)
          git-commit-summary-max-length 50))

  (use-package forge
    :ensure t
    :after magit
    :config (push '("git.innova-partners.com" "git.innova-partners.com/api/v3" "git.innova-partners.com" forge-github-repository) forge-alist))

  (use-package diff-hl
    :ensure t
    :after magit
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config (global-diff-hl-mode))
#+END_SRC

** Project management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :ensure t
    :bind-keymap ("s-p" . projectile-command-map)
    :custom
    (projectile-project-search-path (cddr (directory-files "~/src" t)))
    (projectile-completion-system 'default)
    :config
    (defadvice projectile-project-root (around ignore-remote first activate)
      (unless (file-remote-p default-directory) ad-do-it))
    (projectile-mode t))
#+END_SRC

*** TODO add pretty hydra for projectile

** Languages & frameworks
*** Frontend
#+begin_src emacs-lisp
  (use-package emacs
    :custom (js-indent-level 2))

  (use-package web-mode
    :ensure t
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-enable-css-colorization t)
    (web-mode-extra-snippets
     '(("erb" . (("content_for" . "<% content_for :| do %>\n\n<% end %>")
                 ("content_for_if" . "<% if content_for?(:|) %>\n<% yield : %>\n<% end %>")
                 ("var" . "<%= :| %>")))))
    :init
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode)))

  (use-package emmet-mode
    :hook (web-mode . emmet-mode)
    :ensure t)
#+end_src

*** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :hook (ruby-mode . lsp))

  (use-package bundler :ensure t)

  (use-package yard-mode
    :ensure t
    :after ruby-mode
    :hook ruby-mode)

  (use-package inf-ruby
    :ensure t
    :config (setenv "PAGER" (executable-find "cat")))

  (use-package rspec-mode
    :ensure t
    :hook ((after-init . inf-ruby-switch-setup)
           (compilation-filter-hook . inf-ruby-auto-enter))
    :custom
    (compilation-scroll-output t)
    (rspec-primary-source-dirs '("app")))

  (use-package rubocop :ensure t)
#+END_SRC

*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :hook (yaml-mode . lsp)
    :config (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

* CoverMyEmacs
#+begin_src emacs-lisp
  (use-package covermyemacs
    :bind ("C-c i" . covermyemacs)
    :custom
    (covermyemacs-username "ncox")
    (covermyemacs-pdev-directory "~/src/platform/dev/")
    :load-path "~/src/natecox/covermyemacs/lisp/")
#+end_src
