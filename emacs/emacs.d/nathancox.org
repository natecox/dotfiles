#+TITLE: Nathan Cox's Emacs Configuration
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Preamble
This file is my attempt at a from-scratch emacs configuration, moving away from prebuilt frameworks such as doom and spacemacs.

Information here has been shamelessly stolen from all over the place. It's a good practice to assume anything here was
ripped off from someone smarter than me.

* General configuration
** Boring setup stuff
Starting off by turning on lexical binding, becauase emacs says we have to.
#+begin_src emacs-lisp
  (setq lexical-binding t)
#+end_src

Update the garbage collector with reasonable defaults.
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
#+end_src

Improve performance of vertical scrolling.
#+begin_src emacs-lisp
  (setq auto-window-vscroll nil)
#+end_src

Add the option to remove modes from the modeline with =:diminish=.
#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

Tell emacs that I want to use zsh, and that it should also use my path. This solves a lot of nonsense.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (setenv "SHELL" "/usr/local/bin/zsh")
    (setq exec-path-from-shell-variables '("PATH"))
    (exec-path-from-shell-initialize))
#+end_src

Don't bother showing key bindings. We'll get something better set up via counsel, later on.
#+begin_src emacs-lisp
  (setq suggest-key-bindings nil)
#+end_src

Start a server. This is useful because I'm using emacs-mac, which doesn't have a handy script for running an emacs
server, but I still want to use emacs as the default terminal editor without annoying startup times.
#+begin_src emacs-lisp
  (server-start)
#+end_src

Let Emacs know who the boss is.
#+begin_src emacs-lisp
  (setq user-full-name "Nathan Cox"
        user-mail-address "tsuujin@icloud.com")
#+end_src

** Forcing emacs to get with the times; or, configuring sane defaults
Update the UI behavior to be more modern.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t
        initial-scratch-message nil
        sentence-end-double-space nil
        ring-bell-function 'ignore
        use-dialog-box nil
        mark-even-if-inactive nil
        kill-whole-line t)

  (setq-default indent-tabs-mode nil)     ; Always use spaces.
  (setq-default tab-width 2)              ; 4 is too much

  (defalias 'yes-or-no-p 'y-or-n-p)       ; Always allow 'y' instead of 'yes'.
#+end_src

Set UTF-8 to be the de facto standard.
#+begin_src emacs-lisp
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

When editing, deleted selected text rather than inserting after it.
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

Use the cool Emacs 27 highlighting stuff.
#+begin_src emacs-lisp
  (require 'hl-line)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
  (set-face-attribute 'hl-line nil :background "gray21")
#+end_src

Stop Emacs from littering the filesystem with backups and autosaves.
#+begin_src emacs-lisp
  (setq make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)
#+end_src

Trick emacs into not saving custom configurations. By default, any time you use =M-x customize= emacs will write to
=init.el= with the values you specify. This seems fine, but in practice creates situations where you don't know where
variables are actually being set. Get rid of that by just piping everything to a fake file.
#+begin_src emacs-lisp
  (setq custom-file (make-temp-file ""))
#+end_src

The last block breaks saving information about which theme files we've marked as safe. Just go ahead and assume they're
all safe, and don't download anything not on MELPA.
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
#+end_src

Additionally, screwing with the custom file also breaks saving =defvar= and provides a warning every time. Fix this, too.
#+begin_src emacs-lisp
  (setq enable-local-variables :all)
#+end_src

Keep package info off of the recent files list.
#+begin_src emacs-lisp
  (use-package recentf
    :config (add-to-list 'recentf-exclude "\\elpa"))
#+end_src

Unbind default keys which shouldn't be defaults.
#+begin_src emacs-lisp
  (unbind-key "C-x C-f")                  ; find-file-read-only
  (unbind-key "C-x C-d")                  ; list-directory
  (unbind-key "C-z")                      ; suspend-frame
  (unbind-key "M-o")                      ; facemenu-mode
  (unbind-key "<mouse-2>")                ; pasting with mouse wheel click
  (unbind-key "<C-wheel-down>")           ; text scaling
#+end_src

Bring emacs into the 21st century with whitespace handling that doesn't suck.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
  (setq require-final-newline t)
#+end_src

Provide a more powerful undo tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish
    :bind (("C-c _" . undo-tree-visualize))
    :config
    (global-undo-tree-mode +1)
    (unbind-key "M-_" undo-tree-map))
#+end_src

** User interface and visual improvements
I perfer JetBrains Mono as my font, it has a lot of excellent ligatures and is easy on the eyes.
#+BEGIN_SRC emacs-lisp
  (ignore-errors (set-frame-font "JetBrains Mono 14"))
#+END_SRC

VS Code and other modern editors have spoiled me with nice looking file-type icons. Let's get those working here.
#+begin_src emacs-lisp
  (use-package all-the-icons :ensure t)
#+end_src

Emacs comes by default with a bunch of window chrome. I think the idea is to make it more easily accessible to new users
with a familiar UI, but I don't need or want it.
#+begin_src emacs-lisp
  (when (window-system)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1))
#+end_src

I've been using the gruvbox theme for a while, and every time I try to walk away from it I get pulled back in. It seems
to just have the best overall support and is nice enough in most syntaxes.
#+BEGIN_SRC emacs-lisp
  (setq frame-resize-pixelwise t)
  (use-package gruvbox-theme
    :ensure t
    :init (load-theme 'gruvbox-dark-hard t))
#+END_SRC

At some point I realized that I was switching themes frequently enough that I needed a reminder as to why I stopped
using them. I'll try to keep a running list of things I've tried and why they didn't work for me:
#+CAPTION: Theme Rejections
| Theme     | Reason                                         |
|-----------+------------------------------------------------|
| Nimbus    | Poor support for other modes, e.g., ace window |
| Seti      | Poor support for rainbow delimiters            |
| Chocolate | Not enough contrast with background            |
| Nord      | Not enough contrast in highlighting            |

Update the modeline with a better alternative, and remove some things I don't think are valuable. I started my emacs
journey with Spacemacs, so I guess spaceline just felt comfortable.
#+begin_src emacs-lisp
  (display-time-mode -1)                  ; Don't display the time, it's already on my screen
  (setq column-number-mode t)             ; Do display the column number

  (use-package spaceline
    :ensure t
    :pin melpa
    :init
    (require 'spaceline-config)
    (spaceline-spacemacs-theme))
#+end_src

Improve clarity of which buffer is currently selected by slightly dimming the others. Note that this operates on the
buffer level, not the window, so the same buffer open in two windows will both show as /active/.
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :custom (dimmer-fraction 0.2)
    :config (dimmer-mode))
#+end_src

Given I use emacs primarily for editing, making matching pairs of parenthesis clearer is pretty valuable.
#+begin_src emacs-lisp
  (show-paren-mode)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Giving tree-sitter a shot, I'm told it can improve the syntax highlighting of some languages.
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :hook ruby-mode
    :init (global-tree-sitter-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src

I fairly frequently will do something dumb, like closing a window that I didn't mean to. Winner mode helps with that by
letting me undo it.
#+begin_src emacs-lisp
  (winner-mode +1)
#+end_src

** Text Manipulation
I don't know how we lived without multiple cursor support. Thanks, sublime text! Lets make that work here, too.
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-c m m" . #'mc/edit-lines)
           ("C-c m a" . #'mc/mark-all-dwim)))
#+end_src

When I am writing documentation, or just anything with a prose-like form, I don't tend to want to worry about the length
of the lines; but I also really don't want anything rolling over the edge of the screen. Lets set a sane default for
=fill-paragraph (M-q)=.
#+begin_src emacs-lisp
  (set-fill-column 120)
#+end_src

One of the few things I do miss about Vim is the handy "select in" commands =(ci)=. Lets see if we can get some of that
back. Expand region allows you to execute the command multiple times in sequence to progressively select more of the
current range.
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-c n" . #'er/expand-region)))
#+end_src

* TODO PENDING-REDO
** About this file
This file is my attempt at a from-scratch emacs configuration, moving away from prebuilt frameworks such as doom and spacemacs.

All configuration should be done via =use-package= for performance and consistency.

** General configuration
*** Mac Specific
I use macs exclusively, where alt is moderately difficult to hit.

#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
  (setq mac-control-modifier 'control)
  (setq ns-function-modifier 'hyper)

  (setq insert-directory-program "gls" dired-use-ls-dired t)
  (setq dired-listing-switches "-al --group-directories-first")

  (toggle-scroll-bar -1)

  (if (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode))

  (define-key (current-global-map) (kbd "s-SPC") 'just-one-space)
#+END_SRC

*** Tramp Defaults
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

*** Indentation
#+BEGIN_SRC emacs-lisp
  (electric-indent-mode +1)

  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-character ?|
          highlight-indent-guides-responsive 'stack))
#+END_SRC

*** Search
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("C-:" . 'avy-goto-char)
    :init
    (avy-setup-default)
    (global-set-key (kbd "C-c C-j") 'avy-resume))
#+END_SRC

*** Drag stuff
#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff
    :ensure t
    :bind (("<M-down>" . drag-stuff-down)
           ("<M-up>" . drag-stuff-up)
           ("<M-right>" . drag-stuff-right)
           ("<M-left>" . drag-stuff-left))
    :init
    (drag-stuff-global-mode 1))
#+END_SRC

*** Join region
#+begin_src emacs-lisp
  (defun join-region (beg end)
    "Apply join-line over region."
    (interactive "r")
    (if mark-active
        (let ((beg (region-beginning))
              (end (copy-marker (region-end))))
          (goto-char beg)
          (while (< (point) end)
            (join-line 1)))))
#+end_src

** Org Mode
*** General config
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :bind (("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c c" . org-capture))
    :custom
    (org-directory "~/org")
    (org-agenda-files (list org-directory))
    :init
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-startup-indented t)
    (setq org-agenda-window-setup 'current-window)
    (setq org-confirm-babel-evaluate nil)
    (setq org-export-copy-to-kill-ring 'if-interactive)
    (add-to-list 'exec-path "/Library/TeX/texbin")
    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav"
                  "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc"
                  "ps" "spl" "bbl" "xdv")))
    (setq org-latex-compiler "xelatex")
    (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
    (setq-default TeX-engine 'xetex)
    (setq-default TeX-PDF-mode t)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((ruby . t)
       (shell . t))))

  (use-package project-shells
    :ensure t
    :init
    (global-project-shells-mode))
#+END_SRC

*** Setup for macOS
1. Install macTEX with `brew install cask mactex`
2. Download and install [[https://amaxwell.github.io/tlutility/][TEX Live Utility]]
3. Ensure Lato font is installed

*** Org Superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :custom (org-superstar-special-todo-items t))
#+END_SRC

*** Jira Export
#+begin_src emacs-lisp
  (use-package ox-jira
    :ensure t
    :after org
    :config
    (eval-after-load "org"
      '(progn (require 'ox-jira))))
#+end_src

*** Report Export
#+begin_src emacs-lisp
  (use-package ox-report
    :load-path "~/src/natecox/ox-report/"
    :config (eval-after-load "org" '(progn (require 'ox-report))))
#+end_src

** Development Configuration
*** Toggle quotes
#+BEGIN_SRC emacs-lisp
  (use-package toggle-quotes
    :ensure t
    :bind ("C-'" . toggle-quotes))
#+END_SRC

*** Origami
Provides intelligent code folding.
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :ensure t
    :bind (("C-c o t" . origami-toggle-node))
    :init
    (global-origami-mode +1))
#+END_SRC

*** Ansi term in compilation mode
#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun natecox/colorize-compilation ()
    "Colorize from `compilation-filter-start' to `point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'natecox/colorize-compilation)
#+END_SRC

*** Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init
    (global-company-mode))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))

  (use-package flycheck-package
    :ensure t)
#+END_SRC

*** LSP Integration
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (ruby-mode . lsp)
    ;; :hook (enh-ruby-mode . lsp)
    :hook (elpy-mode . lsp)
    :hook (elm-mode . lsp)
    :hook (yaml-mode . lsp)
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :bind (("C-c k k" . ncox/lsp-hydra/body))
    :commands lsp
    :custom
    (lsp-keymap-prefix "C-c M-k")
    :init
    (defvar ncox--general-lsp-hydra-heads
      '(;; UI
        ("d" lsp-ui-peek-find-definitions "Definitions" :column "Peek")
        ("r" lsp-ui-peek-find-references "References")
        ("i" lsp-ui-peek-find-implementation "Implementation")

        ;; LSP
        ("p" lsp-describe-thing-at-point "Describe at point" :column "LSP")
        ("C-a" lsp-execute-code-action "Execute code action")
        ("C-c" lsp-describe-session "Describe session")

        ;; Formatting
        ("R" lsp-rename "Rename")
        ("f" lsp-format-buffer "Format buffer")

        ;; Flycheck
        ("l" lsp-ui-flycheck-list "List Errors" :column "Flycheck")))
    (eval `(defhydra ncox/lsp-hydra (:color blue :hint nil)
             ,@(append
                ncox--general-lsp-hydra-heads))))

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)

  (use-package lsp-ivy
    :ensure t
    :after lsp-mode)

  (use-package company-lsp
    :ensure t
    :after lsp-mode
    :commands company-lsp)
#+END_SRC

*** Rest client
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :mode ("\\.http\\'" . restclient-mode))

  (use-package ob-restclient
    :ensure t
    :after restclient
    :init
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((restclient . t))))
    )
#+END_SRC

*** Highlighting
**** Gutter
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :after magit
    :init
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (global-diff-hl-mode))
#+END_SRC

*** Web mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode :ensure t)

  (use-package web-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
    (add-hook 'web-mode-hook 'emmet-mode)
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-css-colorization t)
    (setq web-mode-extra-snippets
          '(("erb" . (("content_for" . "<% content_for :| do %>\n\n<% end %>")
                      ("content_for_if" . "<% if content_for?(:|) %>\n<% yield : %>\n<% end %>")
                      ("var" . "<%= :| %>"))))))
#+END_SRC

*** Language Support
**** Groovy
#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :config
    (setq groovy-indent-offset 2)
    (setq c-basic-offset 2))
#+end_src

**** Lisp
#+begin_src emacs-lisp
  (use-package prism
    :ensure t)
#+end_src

**** Elixir
#+BEGIN_SRC emacs-lisp
  (use-package alchemist
    :ensure t)
#+END_SRC

**** Elm
#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :ensure t
    :init
    (add-to-list 'company-backends 'company-elm))
#+END_SRC

**** Ruby
***** Enhanced Ruby
#+begin_src emacs-lisp
  ;; (use-package enh-ruby-mode
  ;;   :ensure t
  ;;   :hook (enh-ruby-mode . inf-ruby-minor-mode)
  ;;   :config
  ;;   (add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
  ;;   (setq enh-ruby-deep-indent-construct nil))
#+end_src
***** Bundler
#+BEGIN_SRC emacs-lisp
  (use-package bundler :ensure t)
#+END_SRC

***** Yard
#+BEGIN_SRC emacs-lisp
  (use-package yard-mode
    :ensure t
    :after ruby-mode
    :hook ruby-mode)
#+END_SRC

***** Rails
#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile-rails
  ;;   :ensure t
  ;;   :after projectile
  ;;   :init
  ;;   (projectile-rails-global-mode)
  ;;   (setq projectile-rails-vanilla-command "bin/rails"))
  ;;   ;; (setq projectile-rails-custom-server-command "heroku local")
  ;;   ;; (setq projectile-rails-javascript-dirs '("app/frontend/"))
  ;;   ;; (setq projectile-rails-javascript-re "\\.(js|ts)")
  ;;   ;; (setq projectile-rails-stylesheet-dirs '("app/frontend/")))
#+END_SRC

***** Rspec-mode
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
  (setenv "PAGER" (executable-find "cat"))

  (use-package inf-ruby
    :ensure t)

  (use-package rspec-mode
    :ensure t
    :hook (after-init . inf-ruby-switch-setup)
    :hook (compilation-filter-hook . inf-ruby-auto-enter)
    :config (setq rspec-primary-source-dirs '("app")))
#+END_SRC

***** Rubocop
#+BEGIN_SRC emacs-lisp
  (use-package rubocop
    :ensure t)
#+END_SRC

**** Javascript
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

**** Typescript
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package typescript-mode
    :ensure t
    :config
    (setq typescript-indent-level 2))

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . 'setup-tide-mode)
           (before-save . tide-format-before-save)))
#+END_SRC

**** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

**** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

**** Rust
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
    :ensure t)

  (use-package rust-mode
    :after (lsp-mode)
    :hook (rust-mode . lsp))

  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

  (use-package flycheck-rust
    :ensure t
    :hook (flycheck-mode . flycheck-rust-setup))
#+END_SRC

*** Indentation
#+BEGIN_SRC emacs-lisp
  (dolist (command '(yank yank-pop))
    (eval `(defadvice ,command (after indent-region activate)
             (and (not current-prefix-arg)
                  (member major-mode '(emacs-lisp-mode prog-mode))
                  (let ((mark-even-if-inactive transient-mark-mode))
                    (indent-region (region-beginning) (region-end) nil))))))
#+END_SRC
** Project Management
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :pin melpa
    :bind (("C-c g s" . magit-status))
    :init
    (setq git-commit-style-convention-checks '(non-empty-second-line overlong-summary-line)
          git-commit-summary-max-length 50))

  (use-package forge
    :ensure t
    :after magit)
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)
    (counsel-projectile-mode)
    (setq projectile-completion-system 'ivy
          projectile-switch-project-action #'projectile-find-dir
          projectile-find-dir-includes-top-level t)
    (defadvice projectile-project-root (around ignore-remote first activate)
      (unless (file-remote-p default-directory) ad-do-it)))
#+END_SRC

** Usability Improvements
*** Discover.el
#+BEGIN_SRC emacs-lisp
  (use-package discover
    :ensure t
    :init (global-discover-mode 1))
#+END_SRC

*** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((projects . 5)
                            (recents . 5)
                            (agenda . 5)
                            (bookmarks . 5)
                            (registers . 5)))
    (setq dashboard-set-footer nil))
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper))
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode 1)
    (counsel-mode 1))

  (use-package counsel
    :after ivy
    :bind (("C-x C-f" . #'counsel-find-file)
           :map ivy-minibuffer-map)
    :init (counsel-mode 1))

  (use-package ivy-hydra
    :ensure t
    :after ivy)

  (use-package flx
    :ensure t
    :after ivy
    :init
    (setq ivy-re-builders-alist '((t . ivy--regex-plus))))

  (use-package counsel-projectile
    :ensure t)

  (use-package all-the-icons-ivy
    :ensure t
    :after (projectile all-the-icons ivy)
    :hook (after-init . all-the-icons-ivy-setup)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
    :config
    (setq all-the-icons-ivy-file-commands
          '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir counsel-switch-buffer)))
#+END_SRC

*** Zoom
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :ensure t
    :init
    (zoom-mode t)
    (global-set-key (kbd "C-x +") 'zoom))
#+END_SRC

** Buffer Navigation
*** iBuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure nil
    :functions (all-the-icons-icon-for-file
                all-the-icons-icon-for-mode
                all-the-icons-auto-mode-match?
                all-the-icons-faicon)
    :commands ibuffer-find-file
    :bind ("C-x C-b" . ibuffer)
    :config
    (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))

    ;; Display buffer icons on GUI
    (when (display-graphic-p)
      ;; To be correctly aligned, the size of the name field must be equal to that
      ;; of the icon column below, plus 1 (for the tab I inserted)
      (define-ibuffer-column icon (:name "   ")
        (let ((icon (if (and (buffer-file-name)
                             (all-the-icons-auto-mode-match?))
                        (all-the-icons-icon-for-file (file-name-nondirectory (buffer-file-name)) :v-adjust -0.05)
                      (all-the-icons-icon-for-mode major-mode :v-adjust -0.05))))
          (if (symbolp icon)
              (setq icon (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.8 :v-adjust 0.0))
            icon)))

      (let ((tab-width 1))
        (setq ibuffer-formats '((mark modified read-only locked
                                      ;; Here you may adjust by replacing :right with :center or :left
                                      ;; According to taste, if you want the icon further from the name
                                      " " (icon 1 -1 :left :elide) "\t" (name 18 18 :left :elide)
                                      " " (size 9 -1 :right)
                                      " " (mode 16 16 :left :elide) " " filename-and-process)
                                (mark " " (name 30 -1) " " filename)))))

    (with-eval-after-load 'counsel
      (defun my-ibuffer-find-file ()
        (interactive)
        (let ((default-directory (let ((buf (ibuffer-current-buffer)))
                                   (if (buffer-live-p buf)
                                       (with-current-buffer buf
                                         default-directory)
                                     default-directory))))
          (counsel-find-file default-directory)))
      (advice-add #'ibuffer-find-file :override #'my-ibuffer-find-file))

    ;; Group ibuffer's list by project root
    (use-package ibuffer-projectile
      :ensure t
      :functions all-the-icons-octicon ibuffer-do-sort-by-alphabetic
      :hook ((ibuffer . (lambda ()
                          (ibuffer-projectile-set-filter-groups)
                          (unless (eq ibuffer-sorting-mode 'alphabetic)
                            (ibuffer-do-sort-by-alphabetic)))))
      :config
      (setq ibuffer-projectile-prefix
            (if (display-graphic-p)
                (concat
                 (all-the-icons-octicon "file-directory"
                                        :face ibuffer-filter-group-name-face
                                        :v-adjust -0.05
                                        :height 1.25)
                 " ")
              "Project: "))))
#+END_SRC

*** Ace Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC

*** Eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :init (eyebrowse-mode t))
#+END_SRC
** Blogging
*** Hugo
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox)
#+END_SRC

** CoverMyEmacs
#+begin_src emacs-lisp
  (use-package covermyemacs
    :bind ("C-c i" . covermyemacs)
    :custom
    (covermyemacs-username "ncox")
    (covermyemacs-pdev-directory "~/src/platform/dev/")
    :load-path "~/src/natecox/covermyemacs/lisp/")
#+end_src
