#+TITLE: Nate's Emacs Config
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle yes :results output silent

* Manifesto

- Prefer navive solutions to packages when possible
- Menus and prompts are better than muscle memory
- Consistency is more important than convinence
- =use-package= is /the way/.

* Setup

** Initialization

#+begin_src emacs-lisp
  (require 'package)

  (setq lexical-binding t)
  (setq gc-cons-threshold 100000000)
  (setq auto-window-vscroll nil)
  (setq max-lisp-eval-depth 2000)
  (setq package-enable-at-startup nil)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("ublt" . "https://elpa.ubolonton.org/packages/") t)

  (when (< emacs-major-version 27)
    (package-initialize))
#+end_src

** COMMENT Quelpa

In the case where a package needs to be built from source locally, quelpa can grab from many sources and do this for us.

It also has a =use-package= integration so we don't need to maintain multiple config styles.

#+begin_src emacs-lisp
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))

  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+end_src

** use-package

use-package is the basis for how packages will be installed and configured going forwards. It provides a sane, stable
way to encapsulate package configs into an easily digestible format.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)

    :config
    (auto-package-update-maybe))

  (use-package diminish :ensure t)

  (use-package exec-path-from-shell
    :ensure t
    :config
    (setenv "SHELL" "/usr/local/bin/zsh")
    (setq exec-path-from-shell-variables '("PATH"))
    (exec-path-from-shell-initialize))
#+end_src

** Additional sane defaults

#+begin_src emacs-lisp
  (use-package emacs
    :hook ((before-save . delete-trailing-whitespace))
    :bind (("s-SPC" . cycle-spacing))

    :custom
    (completion-styles '(basic substring) "gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html")
    (confirm-nonexistent-file-or-buffer nil)
    (cursor-in-non-selected-windows nil)
    (custom-file (concat user-emacs-directory "custom.el"))
    (custom-safe-themes t "mark all themes as safe, since we can't persist now")
    (dired-listing-switches "-al --group-directories-first")
    (enable-local-variables :all "fix =defvar= warnings")
    (font-lock-maximum-decoration nil)
    (font-lock-maximum-size nil)
    (indicate-empty-lines nil)
    (inhibit-startup-echo-area-message t)
    (inhibit-startup-message t)
    (inhibit-startup-screen t)
    (initial-buffer-choice nil)
    (ispell-program-name "aspell")
    (ring-bell-function 'ignore)
    (sentence-end-double-space nil)
    (temp-buffer-max-height 8)
    (use-dialog-box nil)
    (use-file-dialog nil)
    (user-full-name "Nathan Cox")
    (user-mail-address "nate@natecox.dev")
    (window-min-height 1)

    :config

    (setq-default fill-column 100)
    (auto-fill-mode nil)
    (setq frame-title-format nil)
    (setq insert-directory-program "gls" dired-use-ls-dired t)


    ;; Mouse active in terminal
    (unless (display-graphic-p)
      (xterm-mouse-mode 1)
      (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
      (global-set-key (kbd "<mouse-5>") 'scroll-up-line))

    ;; No scroll bars
    (if (fboundp 'scroll-bar-mode) (set-scroll-bar-mode nil))

    ;; No toolbar
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

    ;; No menu bar
    (if (display-graphic-p)
        (menu-bar-mode t) ;; When nil, focus problem on OSX
      (menu-bar-mode -1))

    ;; Navigate windows using shift+direction
    (windmove-default-keybindings)

    ;; Mac specific
    (when (eq system-type 'darwin)
      (setq ns-use-native-fullscreen t
            mac-option-key-is-meta nil
            mac-command-key-is-meta t
            mac-command-modifier 'meta
            mac-option-modifier 'super
            mac-use-title-bar nil))

    ;; Make sure clipboard works properly in tty mode on OSX
    (defun copy-from-osx ()
      (shell-command-to-string "pbpaste"))
    (defun paste-to-osx (text &optional push)
      (let ((process-connection-type nil))
        (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
          (process-send-string proc text)
          (process-send-eof proc))))
    (when (and (not (display-graphic-p))
               (eq system-type 'darwin))
      (setq interprogram-cut-function 'paste-to-osx)
      (setq interprogram-paste-function 'copy-from-osx))

    ;; y/n for  answering yes/no questions
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Size of temporary buffers
    (temp-buffer-resize-mode)

    ;; Buffer encoding
    (prefer-coding-system       'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-language-environment   'utf-8)

    ;; Default shell in term
    (unless (eq system-type 'windows-nt)
      (setq-default shell-file-name "/bin/zsh")
      (setq explicit-shell-file-name "/bin/zsh"))

    ;; Kill term buffer when exiting
    (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
      (if (memq (process-status proc) '(signal exit))
          (let ((buffer (process-buffer proc)))
            ad-do-it
            (kill-buffer buffer))
        ad-do-it))
    (ad-activate 'term-sentinel)

    ;; write over selected text on input... like all modern editors do
    (delete-selection-mode t)

    ;; stop emacs from littering the file system with backup files
    (setq make-backup-files nil
          auto-save-default nil
          create-lockfiles nil)

    ;; enable winner mode globally for undo/redo window layout changes
    (winner-mode t)

    ;; clean up the mode line
    (display-time-mode -1)
    (setq column-number-mode t))

  ;; customize tramp default behaviour
  (use-package tramp
    :custom (tramp-default-method "ssh"))

  ;; use the builtin current-line highlighter
  (use-package hl-line-mode
    :hook ((prog-mode) (text-mode)))

  ;; keep package files out of recentf
  (use-package recentf
    :config
    (add-to-list 'recentf-exclude "\\elpa")
    (add-to-list 'recentf-exclude "^/private"))
#+end_src

* Look and feel

** Theme

#+begin_src emacs-lisp
  (defun nc/respect-sytem-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (modus-themes-load-operandi))
      ('dark (modus-themes-load-vivendi))))

  (use-package modus-themes
    :ensure t

    :config

    (custom-set-faces '(default ((t (:font "JetBrains Mono 13")))))

    ;; If emacs has been built with system appearance detection
    ;; add a hook to change the theme to match the system
    (if (boundp 'ns-system-appearance-change-functions)
        (add-hook 'ns-system-appearance-change-functions #'nc/respect-sytem-theme)
      (modus-themes-load-operandi)))
#+end_src

** Indentation

Recently, I made a switch from space indentation to tabs. If you're interested in my reasoning feel free to check out
[[https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/][this reddit thread]]. tl;dr: tabs are far superiour to spaces for some people with visual impairments, and that is reason
enough for me.

However, as in most things, the best option is somewhere in the middle of a polarized debate. Tabs are the more
accessible option for indentation, but suck for /alignment/. The solution is to just use both: tabs for indentation,
spaces for alignment. Fortunately, someone has [[https://github.com/jcsalomon/smarttabs][already taken care of this for us]].

Note that I have set the default of =indent-tabs-mode= to use spaces. I am in the process of converting my projects to
tabs, but the industry standard is spaces. I use =dir-locals= to enable tabs for my projects and wherever else I'm able.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    ;; use common convention for indentation by default
    (setq-default indent-tabs-mode nil)   ; Always use spaces.

    ;; let emacs handle indentation
    (electric-indent-mode +1))

  ;; indent with tabs, align with spaces where enabled
  (use-package smart-tabs-mode
    :ensure t
    :config (smart-tabs-insinuate 'ruby))

  ;; add a visual intent guide
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-character ?|)
    (highlight-indent-guides-responsive 'stack))
#+end_src

** Text manipulation

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind (:map undo-tree-map ("C-x r" . nil)) ; resolves map conflict w/ discover.el
    :config (global-undo-tree-mode))

  (use-package expand-region
    :ensure t
    :diminish
    :bind (("s-e" . #'er/expand-region)))

  (use-package change-inner
    :ensure t
    :diminish
    :after expand-region
    :bind (("s-i" . #'change-inner)
           ("s-o" . #'change-outer)))

  (use-package drag-stuff
    :ensure t
    :diminish
    :bind (("<M-down>" . drag-stuff-down)
           ("<M-up>" . drag-stuff-up)
           ("<M-right>" . drag-stuff-right)
           ("<M-left>" . drag-stuff-left))
    :config (drag-stuff-global-mode 1))

  (defun nc/run-region-as-shell-command (start end)
    "Execute region from START to END as a shell command."
    (interactive "r")
    (shell-command  (buffer-substring-no-properties start end)))

  (use-package shell-region
    :bind (("s-|" . nc/run-region-as-shell-command)))
#+end_src

** Buffer management

#+BEGIN_SRC emacs-lisp
  ;; (use-package uniquify
  ;;   :custom
  ;;   (uniquify-buffer-name-style 'reverse)
  ;;   (uniquify-separator " • ")
  ;;   (uniquify-after-kill-buffer-p t)
  ;;   (uniquify-ignore-buffers-re "^\\*"))

  ;; (use-package zoom
  ;;   :ensure t
  ;;   :diminish
  ;;   :config (zoom-mode t))

  (use-package ibuffer
    :commands ibuffer-find-file
    :custom
    (ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))))

  ;; (use-package ibuffer-vc
  ;;   :ensure t
  ;;   :hook (ibuffer . (lambda ()
  ;;                      (ibuffer-vc-set-filter-groups-by-vc-root)
  ;;                      (unless (eq ibuffer-sorting-mode 'alphabetic)
  ;;                        (ibuffer-do-sort-by-alphabetic))))
  ;;   :custom
  ;;   (ibuffer-formats '((mark modified read-only " "
  ;;                            (name 18 18 :left :elide) " "
  ;;                            (size 9 -1 :right) " "
  ;;                            (mode 16 16 :left :elide) " "
  ;;                            (vc-status 16 16 :left) " "
  ;;                            (vc-relative-file)))))

  (use-package perspective
    :ensure t

    :bind (("C-x b" . 'persp-switch-to-buffer*)
           ("C-x C-b" . 'persp-ibuffer)
           ("C-x k" . 'persp-kill-buffer*))

    :config (persp-mode))

  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window))
#+END_SRC

* Improving navigation

#+BEGIN_SRC emacs-lisp
  ;; jump to character on screen
  (use-package avy
    :ensure t
    :bind (("s-t" . 'avy-goto-char)
           ("s-T" . 'avy-goto-line)
           ("C-c C-j" . 'avy-resume))
    :config (avy-setup-default))

  ;; better predictions based on common usage
  (use-package prescient
    :ensure t
    :config (prescient-persist-mode t))

  ;; better interface for selecting items from a list
  (use-package selectrum
    :ensure t
    :custom (selectrum-extend-current-candidate-highlight t)
    :config (selectrum-mode t))

  (use-package selectrum-prescient
    :ensure t
    :config (selectrum-prescient-mode t))

  ;; improved UX for searching in a buffer
  (use-package ctrlf
    :ensure t
    :config (ctrlf-mode t))

  ;; add annotations to minibuffers
  (use-package marginalia
    :ensure t
    :bind (:map minibuffer-local-map ("C-M-a" . marginalia-cycle))
    :custom (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode)
    (advice-add #'marginalia-cycle :after
                (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))

  (use-package consult
    :ensure t)
#+END_SRC

* Improving discoverability

#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)

  (use-package major-mode-hydra
    :demand t
    :after hydra
    :diminish
    :bind ([s-return] . major-mode-hydra))

  (use-package pretty-hydra)

  (use-package discover
    :ensure t
    :diminish
    :config (global-discover-mode 1))

  (use-package which-key
    :ensure t
    :diminish
    :config (which-key-mode))
#+END_SRC

* Org Mode

** Installation instructions for macOS

1. Install macTEX with `brew install cask mactex`
2. Download and install [[https://amaxwell.github.io/tlutility/][TEX Live Utility]]
3. Ensure Lato font is installed

** Sane defaults

#+BEGIN_SRC emacs-lisp
  (defun nc/org-insert-dwim (&optional arg)
    "Insert an appropriate org item. ARG optional."
    (interactive "P")
    (when (eq major-mode 'org-mode)
      (let ((org-special-cprl-a/e t)
            (below? (unless (equal arg '(4)) '(4))))
        (cond ((org-at-item-p)
               (let ((org-M-RET-may-split-line nil)
                     (org-enable-sort-checkbox nil))
                 (when below? (org-end-of-line))
                 (org-insert-item (org-at-item-checkbox-p))))
              ((org-before-first-heading-p)
               (org-insert-heading))
              (t
               (org-back-to-heading)
               (if (org-get-todo-state)
                   (org-insert-todo-heading t below?)
                 (org-insert-heading below?)))))))

  (use-package org
    :after (major-mode-hydra)
    :bind (("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c r" . org-refile)
           :map org-mode-map
           ("M-<return>" . nc/org-insert-dwim))

    :hook ((after-init . (lambda () (org-agenda nil "n"))))

    :custom
    (org-agenda-files (directory-files-recursively org-directory "\\.org$"))
    (org-agenda-window-setup 'current-window)
    (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    (org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
    (org-confirm-babel-evaluate nil)
    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-directory "~/org")
    (org-export-copy-to-kill-ring 'if-interactive)
    (org-export-headline-levels 2)
    (org-export-with-author nil)
    (org-export-with-section-numbers nil)
    (org-export-with-sub-superscripts '{})
    (org-export-with-toc nil)
    (org-global-properties
     '(("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))
    (org-latex-logfiles-extensions
     (quote ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav"
             "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc"
             "ps" "spl" "bbl" "xdv")))
    (org-latex-compiler "xelatex")
    (org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
    (org-outline-path-complete-in-steps nil)
    (org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
    (org-refile-use-outline-path 'file)
    (org-return-follows-link t)
    (org-startup-folded 'content)
    (org-startup-indented t)
    (org-tags-column 80)

    :mode-hydra
    (org-mode
     (:title "Org Mode Commands")
     ("Timestamps"
      (("ts" org-time-stamp "Insert active")
       ("ti" org-time-stamp-inactive "Insert inactive"))))

    :config
    (add-to-list 'exec-path "/Library/TeX/texbin")
    (setq-default TeX-engine 'xetex)
    (setq-default TeX-PDF-mode t))
#+END_SRC

** Better capture templates

#+begin_src emacs-lisp
  (use-package doct :ensure t)
#+end_src

** Babel additions

#+begin_src emacs-lisp
  (use-package org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((ruby . t)
       (python . t)
       (shell . t))))

  ;; enable mermaid diagram blocks
  (use-package mermaid-mode
    :ensure t
    :custom (mermaid-mmdc-location "~/.asdf/shims/mmdc"))

  (use-package ob-mermaid
    :ensure t
    :custom (ob-mermaid-cli-path "~/.asdf/shims/mmdc"))
#+end_src

** Exporters

#+begin_src emacs-lisp
  (use-package org-contrib
    :ensure t)

  ;; add jira format export
  (use-package ox-jira
    :ensure t
    :after org
    :config (eval-after-load "org" '(progn (require 'ox-jira))))

  ;; add github flavored markdown export
  (use-package ox-gfm
    :ensure t
    :config (eval-after-load "org" '(require 'ox-gfm nil t)))

  ;; add confluence formatted export
  (use-package ox-confluence
    :after org-contrib
    :config (eval-after-load "org" '(require 'ox-contrib nil t)))
#+end_src

* Terminal

** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

* Programming

** Completion & linting

#+begin_src emacs-lisp
  (use-package flyspell-mode
    :hook ((text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode)))

  (use-package company
    :ensure t
    :diminish
    :config (global-company-mode))

  (use-package company-prescient
    :ensure t
    :after prescient
    :config (company-prescient-mode))

  (use-package flycheck
    :ensure t
    :diminish
    :config (global-flycheck-mode))

  (use-package flycheck-package
    :ensure t
    :after flycheck)

  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

*** TODO add pretty hydra for flycheck

** Visual improvements

#+begin_src emacs-lisp
  (use-package emacs
    :config (show-paren-mode))

  ;; add ansi support for compilation buffers
  (use-package xterm-color
    :ensure t
    :custom (compilation-environment '("TERM=xterm-256color"))
    :config
    (defun nc/advise-compilation-filter (f proc string)
      (funcall f proc (xterm-color-filter string)))
    (advice-add 'compilation-filter :around #'nc/advise-compilation-filter))

  ;; match paired brackets with colors
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; more consistant syntax highlighting
  (use-package tree-sitter
    :ensure t
    :diminish
    :hook ((ruby-mode . tree-sitter-hl-mode)
           (rustic-mode . tree-sitter-hl-mode))
    :config (global-tree-sitter-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src

** LSP integration

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (lsp-enable-which-key-integration)
    :commands lsp
    :custom (lsp-keymap-prefix "C-c M-k")
    :config (add-to-list 'exec-path "~/src/elixir-lsp/elixir-ls/release"))

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)
#+END_SRC

*** TODO add pretty hydra for lsp mode

** Version control

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g s" . magit-status))
    :hook ((git-commit-mode . (lambda () (set-fill-column 72))))
    :config
    (setq git-commit-style-convention-checks '(non-empty-second-line overlong-summary-line)
          git-commit-summary-max-length 50))

  (use-package forge
    :ensure t
    :after magit
    :config (push '("git.innova-partners.com" "git.innova-partners.com/api/v3" "git.innova-partners.com" forge-github-repository) forge-alist))

  (use-package diff-hl
    :ensure t
    :after magit
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config (global-diff-hl-mode))
#+END_SRC

** Project management

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :ensure t
    :bind-keymap ("s-p" . projectile-command-map)
    :custom
    (projectile-project-search-path (cddr (directory-files "~/src" t)))
    (projectile-completion-system 'default)
    :config
    (defadvice projectile-project-root (around ignore-remote first activate)
      (unless (file-remote-p default-directory) ad-do-it))
    (projectile-mode t))

  (use-package persp-projectile
    :ensure t
    :after perspective)
#+END_SRC

*** TODO add pretty hydra for projectile

** Languages & frameworks

*** Frontend

#+begin_src emacs-lisp
  (use-package emacs
    :custom (js-indent-level 2))

  ;; (use-package web-mode
  ;;   :ensure t

  ;;   :custom
  ;;   (web-mode-markup-indent-offset 2)
  ;;   (web-mode-css-indent-offset 2)
  ;;   (web-mode-code-indent-offset 2)
  ;;   (web-mode-enable-css-colorization t)
  ;;   (web-mode-enable-html-entities-fontification t)
  ;;   (web-mode-extra-snippets
  ;;    '(("erb" . (("content_for" . "<% content_for :| do %>\n\n<% end %>")
  ;;                ("content_for_if" . "<% if content_for?(:|) %>\n<% yield : %>\n<% end %>")
  ;;                ("var" . "<%= :| %>")))))

  ;;   :init
  ;;   (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  ;;   (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  ;;   (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode)))

  (use-package html-mode
    :hook (html-mode . lsp))

  (use-package emmet-mode
    :hook (html-mode . emmet-mode)
    :ensure t)
#+end_src

*** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :hook ((clojure-mode . lsp)
           (clojurescript-mode . lsp)
           (clojurec-mode . lsp)))

  (use-package cider
    :ensure t
    :custom (cider-auto-test-mode t))
#+end_src

*** Ruby

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :hook (ruby-mode . lsp))

  (use-package bundler
    :ensure t)

  (use-package yard-mode
    :ensure t
    :after ruby-mode
    :hook ruby-mode)

  (use-package inf-ruby
    :ensure t
    :config (setenv "PAGER" (executable-find "cat")))

  (use-package rspec-mode
    :ensure t
    :hook ((after-init . inf-ruby-switch-setup)
           (compilation-filter-hook . inf-ruby-auto-enter))
    :custom
    (compilation-scroll-output t)
    (rspec-primary-source-dirs '("app")))

  (use-package rubocop
    :ensure t)
#+END_SRC

*** Python

#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init (advice-add 'python-mode :before 'elpy-enable))
#+end_src

*** Yaml

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :hook (yaml-mode . lsp)
    :config (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

** ParEdit mode

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :hook ((lisp-mode . enable-paredit-mode)
           (emacs-lisp-mode . enable-paredit-mode)
           (clojure-mode . enable-paredit-mode)))
#+end_src

* Presentations

#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t)
#+end_src
* RSS

#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :custom
    (elfeed-feeds '(("https://d12frosted.io/atom.xml" blog emacs))))
#+end_src
